{"version":3,"sources":["ColorPicker.js","ColorPreview.js","FileInput.js","index.js","App.js"],"names":["getMousePosition","event","x","offsetX","y","offsetY","rgbToHex","r","g","b","Error","toString","forwardRef","_ref","ref","hoverColor","setHoverColor","setSelectedColor","setXPos","setYPos","canvasElement","React","useRef","_React$useState","useState","_React$useState2","Object","slicedToArray","isColorPickerActive","setIsColorPickerActive","useImperativeHandle","loadImage","dataUrl","image","Image","onload","current","width","naturalWidth","height","naturalHeight","getContext","drawImage","src","mouseMoveHandler","_getMousePosition","canvasContext","_canvasContext$getIma","getImageData","data","hex","slice","clickHandler","useEffect","addEventListener","removeEventListener","react_default","a","createElement","Fragment","className","onClick","val","ColorPreview","backgroundColor","style","FileInput","onFileLoaded","fileInput","handleFileSelection","useCallback","files","target","reader","FileReader","evt","result","readAsDataURL","type","onChange","console","log","rootElement","document","getElementById","ReactDOM","render","colorPickerRef","_React$useState3","_React$useState4","selectedColor","_React$useState5","undefined","_React$useState6","xPos","_React$useState7","_React$useState8","yPos","src_ColorPicker"],"mappings":"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","file":"static/js/main.d9d8bc47.chunk.js","sourcesContent":["import React, { forwardRef } from 'react';\n\nimport './styles.css';\n\nconst getMousePosition = event => ({\n  x: event.offsetX,\n  y: event.offsetY,\n});\n\n// This function is copied from somewhere. Forgot the source.\nconst rgbToHex = (r, g, b) => {\n  if (r > 255 || g > 255 || b > 255) throw new Error('Invalid color');\n  return ((r << 16) | (g << 8) | b).toString(16);\n};\n\nfunction ColorPicker(\n  { hoverColor, setHoverColor, setSelectedColor, setXPos, setYPos },\n  ref\n) {\n  const canvasElement = React.useRef(null);\n  const [isColorPickerActive, setIsColorPickerActive] = React.useState(false);\n\n  // Define an imperative API, in order to better encapsulate canvas logic.\n  React.useImperativeHandle(ref, () => ({\n    loadImage: dataUrl => {\n      const image = new Image();\n      image.onload = () => {\n        canvasElement.current.width = image.naturalWidth;\n        canvasElement.current.height = image.naturalHeight;\n        const canvasContext = canvasElement.current.getContext('2d');\n        // Paint the image onto the canvas.\n        canvasContext.drawImage(image, 0, 0);\n      };\n\n      image.src = dataUrl;\n    },\n  }));\n\n  const mouseMoveHandler = event => {\n    // NOTE: Think about it, do I actually need this check?\n    if (isColorPickerActive) {\n      const { x, y } = getMousePosition(event);\n      setXPos(x);\n      setYPos(y);\n\n      const canvasContext = canvasElement.current.getContext('2d');\n      // NOTE: This currently treats transparent pixels as black.\n      const [r, g, b] = canvasContext.getImageData(x, y, 1, 1).data;\n      const hex = '#' + ('000000' + rgbToHex(r, g, b)).slice(-6);\n      setHoverColor(hex);\n    }\n  };\n\n  const clickHandler = () => {\n    setHoverColor('#FFF');\n    setSelectedColor(hoverColor);\n    setIsColorPickerActive(false);\n  };\n\n  React.useEffect(() => {\n    const { current } = canvasElement;\n    if (isColorPickerActive) {\n      current.addEventListener('mousemove', mouseMoveHandler);\n      current.addEventListener('click', clickHandler);\n    }\n\n    // Cleanup by removing the attached listeners.\n    return () => {\n      current.removeEventListener('mousemove', mouseMoveHandler);\n      current.removeEventListener('click', clickHandler);\n    };\n  }, [isColorPickerActive]);\n\n  return (\n    <>\n      <canvas\n        ref={canvasElement}\n        width=\"490\"\n        height=\"490\"\n        className=\"ColorPicker__canvas\"\n      />\n      <button onClick={() => setIsColorPickerActive(val => !val)}>\n        {isColorPickerActive ? 'Stop' : 'Start'} color picker\n      </button>\n    </>\n  );\n}\n\nexport default forwardRef(ColorPicker);\n","import React from 'react';\nimport './styles.css';\n\nexport default function ColorPreview({ backgroundColor }) {\n  return (\n    <div\n      className=\"ColorPreview\"\n      style={{\n        backgroundColor,\n      }}\n    />\n  );\n}\n","import React from 'react';\n\nexport default function FileInput({ onFileLoaded }) {\n  const fileInput = React.useRef(null);\n\n  const handleFileSelection = React.useCallback(\n    event => {\n      const files = event.target.files;\n      // NOTE: Unsure whether I need to check that `files` is truthy.\n      if (files && files[0]) {\n        const reader = new FileReader();\n        reader.onload = evt => {\n          onFileLoaded(evt.target.result);\n        };\n\n        reader.readAsDataURL(files[0]);\n      }\n    },\n    [onFileLoaded]\n  );\n\n  // NOTE: onChange here is acceptable, but won't be called if the same file is selected */\n  return <input ref={fileInput} type=\"file\" onChange={handleFileSelection} />;\n}\n","import 'babel-polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nconsole.log('version 4');\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n","import React from 'react';\n\nimport ColorPicker from './ColorPicker';\nimport ColorPreview from './ColorPreview';\nimport FileInput from './FileInput';\nimport './styles.css';\n\nexport default function App() {\n  const colorPickerRef = React.useRef(null);\n  const [hoverColor, setHoverColor] = React.useState('#FFF');\n  const [selectedColor, setSelectedColor] = React.useState('#FFF');\n  const [xPos, setXPos] = React.useState(undefined);\n  const [yPos, setYPos] = React.useState(undefined);\n\n  const onFileLoaded = dataUrl => {\n    if (colorPickerRef && colorPickerRef.current) {\n      colorPickerRef.current.loadImage(dataUrl);\n    }\n  };\n\n  return (\n    <div>\n      <ColorPicker\n        ref={colorPickerRef}\n        hoverColor={hoverColor}\n        setHoverColor={setHoverColor}\n        setSelectedColor={setSelectedColor}\n        setXPos={setXPos}\n        setYPos={setYPos}\n      />\n      <FileInput onFileLoaded={onFileLoaded} />\n\n      <div className=\"App__container\">\n        <div className=\"App__column\">\n          <p>Hover Color:</p>\n          <ColorPreview backgroundColor={hoverColor} />\n\n          <p>Selected Color:</p>\n          <ColorPreview backgroundColor={selectedColor} />\n        </div>\n        <div className=\"App__column\">\n          <p>X pixel position:</p> {xPos}\n          <p>Y pixel position:</p> {yPos}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}